print("1번", "="*30)#/////////////////////////////// 1
a =[3,2,1,4]
print (a[-1])
print (a[1:5])   # a번째부터 b-1번째까지 (index는 0부터)
print (len(a)) # 리스트의 갯수
print (type(a)) # a의타입
print (sorted(a)) #정렬

print("2번", "="*30)#/////////////////////////////// 2

b= [1, 2]
print (b[1]+1)

print("3번", "="*30) #/////////////////////////////// 3

b= [1, "1"]
# print (b[1]+1) (문자열이 포함되어있을시 사용불능
for i in b:
    print(i)
print("4번", "="*30) #/////////////////////////////// 4
for i in b:
    print(repr(i))

print("5번", "="*30)#/////////////////////////////// 5

print (a+b)

print("6번", "="*30)#/////////////////////////////// 6

c= []
c= list()
c.append(1)
print(c)

print("7번", "="*30) #/////////////////////////////// 7

a = [1, 3, 2, 4, 5]
b= [ i+1 for i in a] # list안에 for을 넣고싶을때는 원하는 식을 앞에쓰고 뒤에 for구문
print (b)

print("8번", "="*30) #/////////////////////////////// 8

a= [1,3,2,4,5]
b =a
b[0] = 2   # 리스트는 새로 값을 지정해준다고 새로운공간을 차지하는것이아니라서 a[0]역시 2로 바뀐다(얕은카피)

print (a)
print (b)
print("9번", "="*30) #/////////////////////////////// 9

a= [1,3,2,4,5]
b =a[:]
b[0] = 2   # 깊은카피의 경우 새로운공간창출, a는변화하지않는다

print (a)
print (b)

print("10번", "="*30) #///////////////////////////////

a = (1, 3, 2, 4, 5) # 튜플은 값이 변하지 않음
print(a[1])

print("11번", "="*30) #///////////////////////////////

a={'b':2, 'a':1}  #사전형태,  읽어오는속도는 튜플>리스트>사전
print(a['a'])
print(a.keys())
print(a.values())
key = a.keys()
for i in key:
    print('{} : {}'. format(i, a[i]))
print("12번", "="*30) #///////////////////////////////
  
